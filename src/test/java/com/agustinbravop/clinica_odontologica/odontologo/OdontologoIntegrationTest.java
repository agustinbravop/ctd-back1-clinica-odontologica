package com.agustinbravop.clinica_odontologica.odontologo;

import com.agustinbravop.clinica_odontologica.dto.OdontologoDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class OdontologoIntegrationTest {
    static private OdontologoDTO sampleOdontDTO;
    private final ObjectWriter writer = new ObjectMapper()
            .configure(SerializationFeature.WRAP_ROOT_VALUE, false)
            .writer();
    private final ObjectMapper mapper = new ObjectMapper();
    @Autowired
    private MockMvc mockMvc;

    static public void assertPropertiesEquality(OdontologoDTO pac, OdontologoDTO pacDTO) {
        Assertions.assertEquals(pac.getId(), pacDTO.getId());
        Assertions.assertEquals(pac.getNombre(), pacDTO.getNombre());
        Assertions.assertEquals(pac.getApellido(), pacDTO.getApellido());
        Assertions.assertEquals(pac.getMatricula(), pacDTO.getMatricula());
    }

    @BeforeAll
    static void loadSampleOdontDTO() {

        OdontologoDTO odont = new OdontologoDTO();
        odont.setNombre("Manu");
        odont.setApellido("Forster");
        odont.setMatricula(40592);

        sampleOdontDTO = odont;
    }

    // ---------- Los metodos son {metodo}_{input}_{outputEsperado} ----------
    @Test
    @Order(1)
    public void add_OdontologoJson_ResponseIsOkAndNonEmpty() throws Exception {
        String requestJson = writer.writeValueAsString(sampleOdontDTO);

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                .post("/odontologo/add")
                .characterEncoding("UTF-8")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson)
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();

        String responseJson = result.getResponse().getContentAsString();
        sampleOdontDTO = mapper.readValue(responseJson, OdontologoDTO.class);

        Assertions.assertFalse(responseJson.isEmpty());
    }

    @Test
    @Order(2)
    public void get_AutogeneratedId_ResponseIsOkAndEqualToSampleOdontologo() throws Exception {
        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                .get("/odontologo/{id}", sampleOdontDTO.getId())
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content()
                        .contentType(MediaType.APPLICATION_JSON)
                ).andReturn();

        String responseJson = result.getResponse().getContentAsString();
        OdontologoDTO responseObject = mapper.readValue(responseJson, OdontologoDTO.class);

        assertPropertiesEquality(sampleOdontDTO, responseObject);
    }

    @Test
    @Order(3)
    public void modify_modifiedOdontologoJson_ResponseIsOkAndEqualToModifiedOdontologo() throws Exception {
        sampleOdontDTO.setNombre("Emmanuel");
        String requestJson = writer.writeValueAsString(sampleOdontDTO);

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                .put("/odontologo/modify")
                .characterEncoding("UTF-8")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson)
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();

        String responseJson = result.getResponse().getContentAsString();
        OdontologoDTO responseObject = mapper.readValue(responseJson, OdontologoDTO.class);

        assertPropertiesEquality(sampleOdontDTO, responseObject);
    }

    @Test
    @Order(4)
    public void remove_AutogeneratedId_ResponseStatusIsNoContent() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .delete("/odontologo/remove/{id}", sampleOdontDTO.getId())
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isNoContent()
                );
    }

    @Test
    @Order(5)
    public void get_DeletedId_ThrowsEntityNotFound() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get("/odontologo/{id}", sampleOdontDTO.getId())
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isNotFound())
                .andExpect(MockMvcResultMatchers.content()
                        .contentType("text/plain;charset=UTF-8")
                );
    }

}
