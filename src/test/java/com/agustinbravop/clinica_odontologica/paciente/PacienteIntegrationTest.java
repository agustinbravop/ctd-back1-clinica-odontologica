package com.agustinbravop.clinica_odontologica.paciente;

import com.agustinbravop.clinica_odontologica.dto.DomicilioDTO;
import com.agustinbravop.clinica_odontologica.dto.PacienteDTO;
import com.agustinbravop.clinica_odontologica.model.Paciente;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.jupiter.api.*;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.text.SimpleDateFormat;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class PacienteIntegrationTest {
    @Autowired private MockMvc mockMvc;
    private final ObjectWriter writer = new ObjectMapper()
            .configure(SerializationFeature.WRAP_ROOT_VALUE, false)
            .writer();
    private final ObjectMapper mapper = new ObjectMapper();

    static private PacienteDTO samplePacDTO;

    private void assertFieldsEquality(PacienteDTO pac, PacienteDTO pacDTO) {
        Assertions.assertEquals(pac.getId(), pacDTO.getId());
        Assertions.assertEquals(pac.getNombre(), pacDTO.getNombre());
        Assertions.assertEquals(pac.getApellido(), pacDTO.getApellido());
        Assertions.assertEquals(pac.getDni(), pacDTO.getDni());

        Assertions.assertEquals(pac.getDomicilio().getCalle(), pacDTO.getDomicilio().getCalle());
        Assertions.assertEquals(pac.getDomicilio().getNumero(), pacDTO.getDomicilio().getNumero());
        Assertions.assertEquals(pac.getDomicilio().getLocalidad(), pacDTO.getDomicilio().getLocalidad());
        Assertions.assertEquals(pac.getDomicilio().getProvincia(), pacDTO.getDomicilio().getProvincia());
    }

    @BeforeAll
    static void loadTestingData() {
        DomicilioDTO dom = new DomicilioDTO();
        dom.setCalle("Sarmiento");
        dom.setNumero("2049");
        dom.setLocalidad("Ituzaingo");
        dom.setProvincia("Buenos Aires");

        PacienteDTO pac = new PacienteDTO();
        pac.setNombre("Florencia");
        pac.setApellido("De Mollein");
        pac.setDni("78913583");
        pac.setDomicilio(dom);

        samplePacDTO = pac;
    }

    // ---------- Los metodos son {metodo}_{input}_{outputEsperado} ----------
    @Test
    @Order(1)
    public void add_PacienteJson_ResponseIsOkAndNonEmpty() throws Exception {
        String requestJson = writer.writeValueAsString(samplePacDTO);

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                        .post("/paciente/add")
                        .characterEncoding("UTF-8")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(requestJson)
                ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();

        String responseJson = result.getResponse().getContentAsString();
        samplePacDTO = mapper.readValue(responseJson, PacienteDTO.class);

        Assertions.assertFalse(responseJson.isEmpty());
    }

    @Test
    @Order(2)
    public void get_AutogeneratedId_ResponseIsOkAndEqualToSamplePaciente() throws Exception {
        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                .get("/paciente/{id}", samplePacDTO.getId())
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.content()
                        .contentType(MediaType.APPLICATION_JSON)
                ).andReturn();

        String responseJson = result.getResponse().getContentAsString();
        PacienteDTO responseObject = mapper.readValue(responseJson, PacienteDTO.class);

        assertFieldsEquality(samplePacDTO, responseObject);
    }

    @Test
    @Order(3)
    public void modify_modifiedPacienteJson_ResponseIsOkAndEqualToModifiedPaciente() throws Exception {
        samplePacDTO.setNombre("Maria Florencia");
        String requestJson = writer.writeValueAsString(samplePacDTO);

        MvcResult result = mockMvc.perform(MockMvcRequestBuilders
                .put("/paciente/modify")
                .characterEncoding("UTF-8")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestJson)
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andReturn();

        String responseJson = result.getResponse().getContentAsString();
        PacienteDTO responseObject = mapper.readValue(responseJson, PacienteDTO.class);

        assertFieldsEquality(samplePacDTO, responseObject);
    }

    @Test
    @Order(4)
    public void remove_AutogeneratedId_ResponseStatusIsNoContent() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .delete("/paciente/remove/{id}", samplePacDTO.getId())
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isNoContent()
                );
    }

    @Test
    @Order(5)
    public void get_DeletedId_ThrowsEntityNotFound() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders
                .get("/paciente/{id}", samplePacDTO.getId())
        ).andDo(MockMvcResultHandlers.print())
                .andExpect(MockMvcResultMatchers.status().isNotFound())
                .andExpect(MockMvcResultMatchers.content()
                        .contentType("text/plain;charset=UTF-8")
                );
    }
}
